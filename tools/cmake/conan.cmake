include_guard(GLOBAL)

# Conan v2 integration helper for CMake
#
# Usage:
#   include(${CMAKE_SOURCE_DIR}/tools/cmake/conan.cmake)
#   option(CONAN_AUTO_INSTALL "Automatically install conan via pip if missing" ON)
#   conan_bootstrap()

if(NOT DEFINED CONAN_AUTO_INSTALL)
  set(CONAN_AUTO_INSTALL ON CACHE BOOL "Automatically install conan via pip if missing")
endif()

if(NOT DEFINED CONAN_CREATE_INSTALL_TARGET)
  set(CONAN_CREATE_INSTALL_TARGET OFF CACHE BOOL "Create a 'conan-install' custom target that runs conan install")
endif()

# Optional: allow configuring where the CMakeToolchain generator will write
# user presets. Setting this to an empty string disables generation of
# CMakeUserPresets.json by the generator (Conan v2 CMakeToolchain supports
# the user_presets_path attribute). Set via cache or presets:
#   -DCONAN_CMAKE_USER_PRESETS_PATH=""
if(NOT DEFINED CONAN_CMAKE_USER_PRESETS_PATH)
  set(CONAN_CMAKE_USER_PRESETS_PATH "" CACHE STRING "Pass value to CMakeToolchain:user_presets_path to control/disable generation of CMakeUserPresets.json")
endif()


### Helper: ensure conan executable is available (optionally install via pip)
function(conan_ensure_executable OUT_VAR)
  find_program(_conan_cmd NAMES conan)
  if(NOT _conan_cmd)
    if(CONAN_AUTO_INSTALL)
      find_package(Python3 COMPONENTS Interpreter)
      if(NOT Python3_Interpreter_FOUND)
        message(FATAL_ERROR "conan not found and Python3 interpreter not found to install it. Please install conan manually.")
      endif()
      message(STATUS "conan not found: attempting to install 'conan>=2' via pip using ${Python3_EXECUTABLE}")
      execute_process(
        COMMAND ${Python3_EXECUTABLE} -m pip install --upgrade "conan>=2" --break-system-packages
        RESULT_VARIABLE _pip_res
        OUTPUT_VARIABLE _pip_out
        ERROR_VARIABLE _pip_err
        OUTPUT_STRIP_TRAILING_WHITESPACE
        ERROR_STRIP_TRAILING_WHITESPACE
      )
      if(NOT _pip_res EQUAL 0)
        message(FATAL_ERROR "Failed to install conan via pip: ${_pip_err}")
      endif()
      find_program(_conan_cmd NAMES conan REQUIRED)
      if(NOT _conan_cmd)
        message(FATAL_ERROR "conan still not found after pip install; please ensure 'conan' is on PATH")
      endif()
    else()
      message(FATAL_ERROR "conan executable not found. Set CONAN_AUTO_INSTALL=ON to allow automatic installation or install conan manually.")
    endif()
  endif()
  set(${OUT_VAR} ${_conan_cmd} PARENT_SCOPE)
endfunction()


### Helper: build the conan CLI arguments list
function(conan_build_install_args SRC_DIR INSTALL_FOLDER GENS OUT_ARGS_VAR)
  set(_args)
  list(APPEND _args install "${SRC_DIR}")
  list(APPEND _args --output-folder "${INSTALL_FOLDER}")
  list(APPEND _args --build missing)
  # pass build_type if configured (single-config projects)
  if(DEFINED CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    list(APPEND _args -s build_type=${CMAKE_BUILD_TYPE})
  endif()

  if(GENS)
    set(_gens_list ${GENS})
  else()
    set(_gens_list "CMakeToolchain;CMakeDeps")
  endif()
  foreach(g IN LISTS _gens_list)
    list(APPEND _args -g ${g})
  endforeach()

  if(DEFINED CONAN_CMAKE_USER_PRESETS_PATH)
    list(APPEND _args -o)
    list(APPEND _args "CMakeToolchain/*:user_presets_path=${CONAN_CMAKE_USER_PRESETS_PATH}")
  endif()

  # Pass the list elements to the parent scope (preserve as list)
  set(${OUT_ARGS_VAR} ${_args} PARENT_SCOPE)
endfunction()


### Helper: create optional conan-install custom target
function(conan_maybe_create_install_target CONAN_CMD INSTALL_FOLDER SRC_DIR)
  if(NOT CONAN_CREATE_INSTALL_TARGET)
    return()
  endif()

  if(NOT CONAN_CMD)
    find_program(CONAN_CMD NAMES conan)
  endif()

  if(CONAN_CMD)
    # Forward remaining args from the caller via ARGN to COMMAND so the
    # conan arguments are provided as separate arguments (not one quoted string).
    add_custom_target(conan-install
      COMMAND ${CONAN_CMD} ${ARGN}
      WORKING_DIRECTORY ${SRC_DIR}
      COMMENT "Run conan install (generated by conan.cmake)"
      VERBATIM
    )
  else()
    message(STATUS "CONAN_CREATE_INSTALL_TARGET enabled but 'conan' executable not found; target will be created but will fail at build time")
    add_custom_target(conan-install
      COMMAND ${CMAKE_COMMAND} -E echo "conan not found; install conan to run this target"
      COMMENT "conan not found"
    )
  endif()
endfunction()


### Helper: remove repo-root CMakeUserPresets.json if it references generated output
function(conan_cleanup_root_user_presets INSTALL_FOLDER)
  set(_root_user_presets "${CMAKE_SOURCE_DIR}/CMakeUserPresets.json")
  if(EXISTS ${_root_user_presets})
    file(READ ${_root_user_presets} _cup_contents)
    string(FIND "${_cup_contents}" "/generators/CMakePresets.json" _has_gen_ref)
    string(FIND "${_cup_contents}" "${INSTALL_FOLDER}" _has_install_ref)
    if(NOT _has_gen_ref EQUAL -1 OR NOT _has_install_ref EQUAL -1)
      file(REMOVE ${_root_user_presets})
      message(STATUS "Removed generated root CMakeUserPresets.json: ${_root_user_presets}")
    endif()
  endif()
endfunction()


### Helper: locate generated conan_toolchain.cmake under various common locations
function(conan_find_generated_toolchain INSTALL_FOLDER OUT_TOOLCHAIN_VAR)
  set(_candidates)
  list(APPEND _candidates ${INSTALL_FOLDER}/conan_toolchain.cmake)
  list(APPEND _candidates ${INSTALL_FOLDER}/generators/conan_toolchain.cmake)
  if(DEFINED CMAKE_BUILD_TYPE)
    list(APPEND _candidates ${INSTALL_FOLDER}/build/${CMAKE_BUILD_TYPE}/generators/conan_toolchain.cmake)
  endif()

  # Generic recursive search under source/build trees
  file(GLOB_RECURSE _global_toolchains
       RELATIVE ${CMAKE_SOURCE_DIR}
       "${CMAKE_SOURCE_DIR}/build/*/conan/**/conan_toolchain.cmake"
       "${CMAKE_SOURCE_DIR}/build/**/generators/conan_toolchain.cmake"
       "${CMAKE_BINARY_DIR}/**/conan_toolchain.cmake")
  foreach(_g IN LISTS _global_toolchains)
    list(APPEND _candidates ${CMAKE_SOURCE_DIR}/${_g})
  endforeach()

  # Find any conan_toolchain.cmake under the install folder
  file(GLOB_RECURSE _found_toolchains RELATIVE ${INSTALL_FOLDER} "${INSTALL_FOLDER}/*conan_toolchain.cmake")
  foreach(f IN LISTS _found_toolchains)
    list(APPEND _candidates ${INSTALL_FOLDER}/${f})
  endforeach()

  list(REMOVE_DUPLICATES _candidates)

  set(_found "")
  foreach(candidate IN LISTS _candidates)
    if(EXISTS ${candidate})
      set(_found ${candidate})
      break()
    endif()
  endforeach()

  set(${OUT_TOOLCHAIN_VAR} "${_found}" PARENT_SCOPE)
endfunction()


### Helper: include found toolchain and expose generator dirs for find_package
function(conan_configure_toolchain FOUND_TOOLCHAIN INSTALL_FOLDER)
  if(NOT FOUND_TOOLCHAIN)
    message(STATUS "Conan install completed; conan_toolchain.cmake not found under ${INSTALL_FOLDER}. If you used a different generator check ${INSTALL_FOLDER}.")
    return()
  endif()

  message(STATUS "Found generated Conan toolchain: ${FOUND_TOOLCHAIN}")

  if(NOT DEFINED CMAKE_TOOLCHAIN_FILE OR NOT EXISTS ${CMAKE_TOOLCHAIN_FILE})
    set(CMAKE_TOOLCHAIN_FILE ${FOUND_TOOLCHAIN} CACHE FILEPATH "Conan generated toolchain file" FORCE)
    message(STATUS "Setting CMAKE_TOOLCHAIN_FILE to ${CMAKE_TOOLCHAIN_FILE}")
  else()
    message(STATUS "CMAKE_TOOLCHAIN_FILE already set by caller: ${CMAKE_TOOLCHAIN_FILE}; leaving it unchanged")
  endif()

  include(${FOUND_TOOLCHAIN})

  # Locate generators dir so find_package() can discover generated <pkg>Config.cmake
  set(_gen_dir "")
  if(DEFINED CMAKE_BUILD_TYPE AND EXISTS ${INSTALL_FOLDER}/build/${CMAKE_BUILD_TYPE}/generators)
    set(_gen_dir ${INSTALL_FOLDER}/build/${CMAKE_BUILD_TYPE}/generators)
  elseif(EXISTS ${INSTALL_FOLDER}/generators)
    set(_gen_dir ${INSTALL_FOLDER}/generators)
  else()
    string(FIND "${FOUND_TOOLCHAIN}" "/generators/" _pos)
    if(NOT _pos EQUAL -1)
      string(SUBSTRING "${FOUND_TOOLCHAIN}" 0 ${_pos} _prefix)
      set(_gen_dir "${_prefix}/generators")
    endif()
  endif()

  if(_gen_dir AND EXISTS ${_gen_dir})
    if(DEFINED CMAKE_PREFIX_PATH)
      list(FIND CMAKE_PREFIX_PATH "${_gen_dir}" _found_prefix)
    else()
      set(_found_prefix -1)
    endif()
    if(_found_prefix EQUAL -1)
      set(CMAKE_PREFIX_PATH "${_gen_dir};${CMAKE_PREFIX_PATH}" CACHE PATH "Paths to search for packages" FORCE)
      message(STATUS "Added Conan generators dir to CMAKE_PREFIX_PATH: ${_gen_dir}")
    endif()
  else()
    message(STATUS "Conan generators dir not found under ${INSTALL_FOLDER}; generated packages may not be discoverable without setting CMAKE_PREFIX_PATH or <Pkg>_DIR variables.")
  endif()

  # As a robust fallback, detect commonly requested package config files
  # produced by CMakeDeps (for example GTestConfig.cmake) and set the
  # corresponding <Pkg>_DIR cache variable so find_package() works.
  file(GLOB_RECURSE _pkg_configs RELATIVE ${INSTALL_FOLDER} "${INSTALL_FOLDER}/*GTestConfig.cmake")
  foreach(_cfg IN LISTS _pkg_configs)
    get_filename_component(_cfg_dir "${_cfg}" DIRECTORY)
    set(_abs_cfg_dir "${INSTALL_FOLDER}/${_cfg_dir}")
    if(EXISTS ${_abs_cfg_dir})
      set(GTest_DIR ${_abs_cfg_dir} CACHE PATH "Conan generated GTest config directory" FORCE)
      message(STATUS "Set GTest_DIR to ${GTest_DIR}")
      break()
    endif()
  endforeach()
endfunction()


### Public: orchestrator (backwards-compatible wrapper)
function(conan_bootstrap)
  cmake_parse_arguments(_ "" "INSTALL_FOLDER;SOURCE_DIR" "GENS" ${ARGN})

  if(_SOURCE_DIR)
    set(_src_dir ${_SOURCE_DIR})
  else()
    set(_src_dir ${CMAKE_SOURCE_DIR})
  endif()

  if(_INSTALL_FOLDER)
    set(_install_folder ${_INSTALL_FOLDER})
  else()
    set(_install_folder ${CMAKE_BINARY_DIR}/conan)
  endif()

  # If caller already provided a nested toolchain path that points into a
  # conan output folder, infer and prefer that install folder.
  if(DEFINED CMAKE_TOOLCHAIN_FILE)
    string(FIND "${CMAKE_TOOLCHAIN_FILE}" "/conan/" _conan_pos)
    if(NOT _conan_pos EQUAL -1)
      math(EXPR _len "${_conan_pos} + 6")
      string(SUBSTRING "${CMAKE_TOOLCHAIN_FILE}" 0 ${_len} _conan_prefix)
      if(EXISTS ${_conan_prefix})
        set(_install_folder ${_conan_prefix})
        message(STATUS "Inferred Conan install folder from CMAKE_TOOLCHAIN_FILE: ${_install_folder}")
      endif()
    endif()
  endif()

  if(_GENS)
    set(_gens ${_GENS})
  else()
    set(_gens "CMakeToolchain;CMakeDeps")
  endif()

  # Respect any user-provided toolchain file
  if(DEFINED CMAKE_TOOLCHAIN_FILE AND EXISTS ${CMAKE_TOOLCHAIN_FILE})
    message(STATUS "CMAKE_TOOLCHAIN_FILE already set: ${CMAKE_TOOLCHAIN_FILE}")
    set(_user_provided_toolchain TRUE)
  else()
    set(_user_provided_toolchain FALSE)
  endif()

  # Ensure conan CLI is available (or install it)
  conan_ensure_executable(_conan_cmd)

  # Build CLI args
  conan_build_install_args(${_src_dir} ${_install_folder} "${_gens}" _conan_cmd_args)

  # Create install folder and optional target
  file(MAKE_DIRECTORY ${_install_folder})
  # Pass the built arg list as individual args (don't quote the list variable)
  conan_maybe_create_install_target(${_conan_cmd} ${_install_folder} ${_src_dir} ${_conan_cmd_args})

  message(STATUS "Running: ${_conan_cmd} ${_conan_cmd_args}")
  execute_process(
    COMMAND ${_conan_cmd} ${_conan_cmd_args}
    RESULT_VARIABLE _conan_res
    OUTPUT_VARIABLE _conan_out
    ERROR_VARIABLE _conan_err
    OUTPUT_STRIP_TRAILING_WHITESPACE
    ERROR_STRIP_TRAILING_WHITESPACE
  )

  if(NOT _conan_res EQUAL 0)
    message(FATAL_ERROR "conan install failed: ${_conan_err}")
  endif()

  conan_cleanup_root_user_presets(${_install_folder})

  conan_find_generated_toolchain(${_install_folder} _found_toolchain)
  conan_configure_toolchain(${_found_toolchain} ${_install_folder})

  # Expose install folder to parent scope
  set(CONAN_INSTALL_FOLDER ${_install_folder} PARENT_SCOPE)
endfunction()
