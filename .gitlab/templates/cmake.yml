# SPDX-License-Identifier: Apache-2.0
---
spec:
  inputs:
    stage:
      options: ["build", "test"]
      default: build
      description: "The stage and order in which to run the job with `build` and `test`."
    job:
      default: cmake
      description: "Name of the job commands to run to accomplish tasks."
    image:
      default: debian:13.1-slim
      description: "The container image to use for the job."
    tags:
      type: array
      default: ["linux", "shared", "docker", "x86_64"]
      description: "List of runner tags to select the appropriate runner."
    allow_failure:
      type: boolean
      default: false
      description: "Whether the job is allowed to fail without failing the pipeline."
    schedule:
      options: ["never", "only", "always"]
      default: never
      description: "Specify when to add the job in scheduled pipelines with `never`, `only`, and `always`."
    dependencies:
      type: array
      default: []
      description: "List of jobs to download artifacts from for this job."
    needs:
      type: array
      default: []
      description: "List of jobs that must complete before this job runs."
    rules:
      type: array
      default: []
      description: "List of custom rules to add to the job."
    before:
      type: array
      default: []
      description: "List of commands to run to set up the job environment."
    after:
      type: array
      default: []
      description: "List of commands to run to tear down the job environment."
    tasks:
      type: array
      default: []
      description: "List of commands to run to accomplish tasks."
    artifacts_paths:
      type: array
      default: []
      description: "List of files and directories to be attached to a job as artifacts."
    artifacts_exclude:
      type: array
      default: [".git", ".git/**/*"]
      description: "List of files and directories to be excluded from job artifacts."
    artifacts_access:
      options: ["all", "developer", "none"]
      default: developer
      description: "The access level for job artifacts with `all`, `developer`, and `none`."
    artifacts_expire_in:
      default: "15 days"
      description: "The time after which job artifacts are deleted."
---
"$[[ inputs.job ]]-$[[ inputs.stage ]]":
  stage: $[[ inputs.stage ]]
  image: $[[ inputs.image ]]
  tags: $[[ inputs.tags ]]
  allow_failure: $[[ inputs.allow_failure ]]
  dependencies: $[[ inputs.dependencies ]]
  needs: $[[ inputs.needs ]]
  interruptible: true
  variables:
    SCHEDULE_JOB: "$[[ inputs.schedule ]]"
    GIT_SUBMODULE_STRATEGY: recursive
    CI_PROJECT_DIR: $CI_BUILDS_DIR/$CI_PROJECT_NAME
    GIT_CLONE_PATH: $CI_PROJECT_DIR
  before_script:
    - apt update -qy >/dev/null 2>&1 && apt install -y make >/dev/null 2>&1
    - $[[ inputs.before ]]
  after_script:
    - $[[ inputs.after ]]
  script:
    - $[[ inputs.tasks ]]
  coverage: '/lines:\s+([0-9]+(?:\.[0-9]+)?)/'
  artifacts:
    access: $[[ inputs.artifacts_access ]]
    paths: $[[ inputs.artifacts_paths ]]
    exclude: $[[ inputs.artifacts_exclude ]]
    expire_in: $[[ inputs.artifacts_expire_in ]]
    when: on_failure
    # XXX The artifacts created for `artifacts:reports` are always uploaded, regardless of the job
    # results (success or failure). The CI/CD YAML syntax reference `artifacts:when` does not
    # change this behavior.
    # See https://docs.gitlab.com/ci/yaml/#artifactswhen
    reports:
      codequality: gl-code-quality-report.json
      junit: logs/test/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: logs/coverage/cobertura.xml
  rules:
    # Insert any custom rules provided by the including pipeline
    - $[[ inputs.rules ]]
    # Add Job in Scheduled Pipelines
    - if: $SCHEDULE_JOB == "only" && $CI_PIPELINE_SOURCE == "schedule"
    - if: $SCHEDULE_JOB == "only"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_JOB == "never"
      when: never
    - if: $SCHEDULE_JOB == "always" && $CI_PIPELINE_SOURCE == "schedule"
    # Else add Job on Merge Request Pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # Else add Job to Branch Pipelines
    - if: $CI_COMMIT_BRANCH
    # Else don't add Job in other Pipeline conditions
    - when: never
